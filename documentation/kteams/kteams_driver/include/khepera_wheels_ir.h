#pragma once

// Definition of the communication with the wheel server on the khepera
// This provides access to read the current wheel speed, position and IR sensors

#include <ktprot.h>
#include <array>
#include <fstream>
#include <boost/asio.hpp>


namespace kteams {
  namespace khepera {

    // The IR and the wheels are accessed through the wheel server
    // and the communication is handled by ktprot
    struct WheelServer {
    
      ktprot::Writer writer;
      ktprot::Reader reader;
      boost::asio::ip::tcp::iostream socket;
      std::ofstream log_input_wheels;
      std::ofstream log_output_wheels;

      WheelServer();
      void connect(std::string hostname, std::string port);
      void close();
    };
  

    ////////////////////////////////////////////////// Infrared

    // The IRReader is calibrated by matching the response curves
    // of the documentation with the curve generated by
    // khepera_driver/scripts/calibrate_ir.py
    struct IRReader {
      static constexpr double ir_cut_dist = 0.030; // m
      static constexpr double ir_max_dist = 0.200; // m
      static constexpr double ir_half_dist = 0.050; // m
      static constexpr int ir_order = 5;
      static constexpr int max_ir_value = 1023; 
      static constexpr int nb_ir_sensors = 12;  // 8 around, 4 bottom

      WheelServer& server;
      IRReader(WheelServer& serv);

      // The returned distance is in m.
      // This is yet to be calibrated
      static double get_dist_from_ir(int ir_value);
      void read(std::array<double, nb_ir_sensors>& ranges, std::array<int, nb_ir_sensors>& raw);
    };


    ////////////////////////////////////////////////// Wheels

    // The inter_wheels_distance was actually measured and then hand-tuned
    struct WheelSpeed {
      static constexpr double factor_pulse_to_speed = (0.678181*1e-3); // see manual 4.14.1, pulse to m/s
      static constexpr double inter_wheels_distance = 0.104; // m
      WheelServer& server;
      WheelSpeed(WheelServer& serv);
      void read(double& linear, double& angular) const;
      void write(double linear, double angular) const;
    };

  }
}
