// Generated by gencpp from file acquisition_biosemi/biosemi_echantillon.msg
// DO NOT EDIT!


#ifndef ACQUISITION_BIOSEMI_MESSAGE_BIOSEMI_ECHANTILLON_H
#define ACQUISITION_BIOSEMI_MESSAGE_BIOSEMI_ECHANTILLON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acquisition_biosemi
{
template <class ContainerAllocator>
struct biosemi_echantillon_
{
  typedef biosemi_echantillon_<ContainerAllocator> Type;

  biosemi_echantillon_()
    : numero(0)
    , frequence(0)
    , valeurs()
    , extra()  {
    }
  biosemi_echantillon_(const ContainerAllocator& _alloc)
    : numero(0)
    , frequence(0)
    , valeurs(_alloc)
    , extra(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _numero_type;
  _numero_type numero;

   typedef uint32_t _frequence_type;
  _frequence_type frequence;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _valeurs_type;
  _valeurs_type valeurs;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _extra_type;
  _extra_type extra;





  typedef boost::shared_ptr< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> const> ConstPtr;

}; // struct biosemi_echantillon_

typedef ::acquisition_biosemi::biosemi_echantillon_<std::allocator<void> > biosemi_echantillon;

typedef boost::shared_ptr< ::acquisition_biosemi::biosemi_echantillon > biosemi_echantillonPtr;
typedef boost::shared_ptr< ::acquisition_biosemi::biosemi_echantillon const> biosemi_echantillonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace acquisition_biosemi

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'acquisition_biosemi': ['/home/thomas/project_bci/src/acquisition_biosemi/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67396af516a2f6cfba37f1fe30b83eb5";
  }

  static const char* value(const ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67396af516a2f6cfULL;
  static const uint64_t static_value2 = 0xba37f1fe30b83eb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acquisition_biosemi/biosemi_echantillon";
  }

  static const char* value(const ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 numero\n"
"uint32 frequence\n"
"float64[] valeurs\n"
"string extra\n"
;
  }

  static const char* value(const ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.numero);
      stream.next(m.frequence);
      stream.next(m.valeurs);
      stream.next(m.extra);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct biosemi_echantillon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acquisition_biosemi::biosemi_echantillon_<ContainerAllocator>& v)
  {
    s << indent << "numero: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.numero);
    s << indent << "frequence: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frequence);
    s << indent << "valeurs[]" << std::endl;
    for (size_t i = 0; i < v.valeurs.size(); ++i)
    {
      s << indent << "  valeurs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.valeurs[i]);
    }
    s << indent << "extra: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.extra);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACQUISITION_BIOSEMI_MESSAGE_BIOSEMI_ECHANTILLON_H
